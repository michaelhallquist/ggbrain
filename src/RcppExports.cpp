// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// count_neighbors
NumericMatrix count_neighbors(LogicalMatrix im, bool diagonal);
RcppExport SEXP _ggbrain_count_neighbors(SEXP imSEXP, SEXP diagonalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalMatrix >::type im(imSEXP);
    Rcpp::traits::input_parameter< bool >::type diagonal(diagonalSEXP);
    rcpp_result_gen = Rcpp::wrap(count_neighbors(im, diagonal));
    return rcpp_result_gen;
END_RCPP
}
// fill_from_edge
LogicalMatrix fill_from_edge(LogicalMatrix im, int nedges);
RcppExport SEXP _ggbrain_fill_from_edge(SEXP imSEXP, SEXP nedgesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalMatrix >::type im(imSEXP);
    Rcpp::traits::input_parameter< int >::type nedges(nedgesSEXP);
    rcpp_result_gen = Rcpp::wrap(fill_from_edge(im, nedges));
    return rcpp_result_gen;
END_RCPP
}
// flood_fill
void flood_fill(LogicalMatrix& im, const int x, const int y, const int& r, const int& c);
RcppExport SEXP _ggbrain_flood_fill(SEXP imSEXP, SEXP xSEXP, SEXP ySEXP, SEXP rSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalMatrix& >::type im(imSEXP);
    Rcpp::traits::input_parameter< const int >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type y(ySEXP);
    Rcpp::traits::input_parameter< const int& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int& >::type c(cSEXP);
    flood_fill(im, x, y, r, c);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ggbrain_count_neighbors", (DL_FUNC) &_ggbrain_count_neighbors, 2},
    {"_ggbrain_fill_from_edge", (DL_FUNC) &_ggbrain_fill_from_edge, 2},
    {"_ggbrain_flood_fill", (DL_FUNC) &_ggbrain_flood_fill, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_ggbrain(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
