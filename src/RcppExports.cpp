// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// count_neighbors
arma::imat count_neighbors(const arma::umat& im, bool diagonal);
RcppExport SEXP _ggbrain_count_neighbors(SEXP imSEXP, SEXP diagonalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::umat& >::type im(imSEXP);
    Rcpp::traits::input_parameter< bool >::type diagonal(diagonalSEXP);
    rcpp_result_gen = Rcpp::wrap(count_neighbors(im, diagonal));
    return rcpp_result_gen;
END_RCPP
}
// df2mat
NumericMatrix df2mat(const DataFrame& df, Nullable<NumericVector> replace_na);
RcppExport SEXP _ggbrain_df2mat(SEXP dfSEXP, SEXP replace_naSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type replace_na(replace_naSEXP);
    rcpp_result_gen = Rcpp::wrap(df2mat(df, replace_na));
    return rcpp_result_gen;
END_RCPP
}
// fill_from_edge
LogicalMatrix fill_from_edge(LogicalMatrix im, int nedges);
RcppExport SEXP _ggbrain_fill_from_edge(SEXP imSEXP, SEXP nedgesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalMatrix >::type im(imSEXP);
    Rcpp::traits::input_parameter< int >::type nedges(nedgesSEXP);
    rcpp_result_gen = Rcpp::wrap(fill_from_edge(im, nedges));
    return rcpp_result_gen;
END_RCPP
}
// find_threads
arma::umat find_threads(const arma::mat& img, int min_neighbors, int maxit, bool diagonal);
RcppExport SEXP _ggbrain_find_threads(SEXP imgSEXP, SEXP min_neighborsSEXP, SEXP maxitSEXP, SEXP diagonalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type img(imgSEXP);
    Rcpp::traits::input_parameter< int >::type min_neighbors(min_neighborsSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< bool >::type diagonal(diagonalSEXP);
    rcpp_result_gen = Rcpp::wrap(find_threads(img, min_neighbors, maxit, diagonal));
    return rcpp_result_gen;
END_RCPP
}
// flood_fill
void flood_fill(LogicalMatrix& im, const int x, const int y, const int& r, const int& c);
RcppExport SEXP _ggbrain_flood_fill(SEXP imSEXP, SEXP xSEXP, SEXP ySEXP, SEXP rSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalMatrix& >::type im(imSEXP);
    Rcpp::traits::input_parameter< const int >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type y(ySEXP);
    Rcpp::traits::input_parameter< const int& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const int& >::type c(cSEXP);
    flood_fill(im, x, y, r, c);
    return R_NilValue;
END_RCPP
}
// integer_mode
int integer_mode(arma::ivec v, bool demote_zeros);
RcppExport SEXP _ggbrain_integer_mode(SEXP vSEXP, SEXP demote_zerosSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::ivec >::type v(vSEXP);
    Rcpp::traits::input_parameter< bool >::type demote_zeros(demote_zerosSEXP);
    rcpp_result_gen = Rcpp::wrap(integer_mode(v, demote_zeros));
    return rcpp_result_gen;
END_RCPP
}
// mat2df
DataFrame mat2df(const arma::mat& mat);
RcppExport SEXP _ggbrain_mat2df(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(mat2df(mat));
    return rcpp_result_gen;
END_RCPP
}
// nearest_pts
arma::vec nearest_pts(int x, int y, const arma::mat& in_mat, int neighbors, int radius, bool ignore_zeros);
RcppExport SEXP _ggbrain_nearest_pts(SEXP xSEXP, SEXP ySEXP, SEXP in_matSEXP, SEXP neighborsSEXP, SEXP radiusSEXP, SEXP ignore_zerosSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type in_mat(in_matSEXP);
    Rcpp::traits::input_parameter< int >::type neighbors(neighborsSEXP);
    Rcpp::traits::input_parameter< int >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< bool >::type ignore_zeros(ignore_zerosSEXP);
    rcpp_result_gen = Rcpp::wrap(nearest_pts(x, y, in_mat, neighbors, radius, ignore_zeros));
    return rcpp_result_gen;
END_RCPP
}
// nn_impute
arma::mat nn_impute(const arma::mat& in_mat, int neighbors, int radius, std::string aggfun, bool ignore_zeros);
RcppExport SEXP _ggbrain_nn_impute(SEXP in_matSEXP, SEXP neighborsSEXP, SEXP radiusSEXP, SEXP aggfunSEXP, SEXP ignore_zerosSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type in_mat(in_matSEXP);
    Rcpp::traits::input_parameter< int >::type neighbors(neighborsSEXP);
    Rcpp::traits::input_parameter< int >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< std::string >::type aggfun(aggfunSEXP);
    Rcpp::traits::input_parameter< bool >::type ignore_zeros(ignore_zerosSEXP);
    rcpp_result_gen = Rcpp::wrap(nn_impute(in_mat, neighbors, radius, aggfun, ignore_zeros));
    return rcpp_result_gen;
END_RCPP
}
// sort_mat
arma::mat sort_mat(arma::mat x, unsigned int col);
RcppExport SEXP _ggbrain_sort_mat(SEXP xSEXP, SEXP colSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type col(colSEXP);
    rcpp_result_gen = Rcpp::wrap(sort_mat(x, col));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ggbrain_count_neighbors", (DL_FUNC) &_ggbrain_count_neighbors, 2},
    {"_ggbrain_df2mat", (DL_FUNC) &_ggbrain_df2mat, 2},
    {"_ggbrain_fill_from_edge", (DL_FUNC) &_ggbrain_fill_from_edge, 2},
    {"_ggbrain_find_threads", (DL_FUNC) &_ggbrain_find_threads, 4},
    {"_ggbrain_flood_fill", (DL_FUNC) &_ggbrain_flood_fill, 5},
    {"_ggbrain_integer_mode", (DL_FUNC) &_ggbrain_integer_mode, 2},
    {"_ggbrain_mat2df", (DL_FUNC) &_ggbrain_mat2df, 1},
    {"_ggbrain_nearest_pts", (DL_FUNC) &_ggbrain_nearest_pts, 6},
    {"_ggbrain_nn_impute", (DL_FUNC) &_ggbrain_nn_impute, 5},
    {"_ggbrain_sort_mat", (DL_FUNC) &_ggbrain_sort_mat, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_ggbrain(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
